(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.React = factory());
})(this, (function () { 'use strict';

	// 检查是否有 运行环境是否有 Symbol
	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	// 这个是ReactElement的$$typeof 用于防范XSS注入攻击（会将对象渲染成元素）
	// json字符串不能为Symbol 用于防范XSS （传入的json字符串无法传入$$typeof）也就无法生成ReactElement元素
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	// packages/react/src/jsx.ts
	const ReactElement = function (type, key, ref, props) {
	    // 根据参数转化成reactelement对象 打上标记
	    const element = {
	        $$typeof: REACT_ELEMENT_TYPE,
	        type,
	        key,
	        ref,
	        props,
	        __mark: 'dawn'
	    };
	    return element;
	};

	/* React 17之前，JSX 转换结果
	function App() {
	    return React.createElement('div', null, 'Hello world!');
	}

	// React 17之后，JSX 转换结果
	function App() {
	    return _jsx('div', { children: 'Hello world!' });
	 }
	*/
	// jsx转化
	// 编译时 Babel会将jsx语法转化成JavaScript API
	// 运行时，使用React 的jsx和React.createElement 将jsx语法转化成ReactElement对象
	// babel会将jsx的标签转化成 tag：type，props：config，children
	const jsx = (type, config, ...children) => {
	    let key = null;
	    let ref = null;
	    const props = {};
	    //主要是将config中的属性提取到key，ref和props
	    for (const prop in config) {
	        const value = config[prop];
	        if (prop === 'key') {
	            if (value !== undefined) {
	                key = '' + value;
	            }
	            continue;
	        }
	        if (prop === 'ref') {
	            if (value !== undefined) {
	                ref = value;
	            }
	            continue;
	        }
	        if (Object.hasOwn(config, prop)) {
	            props[prop] = value;
	        }
	    }
	    // 将children转化给props.children
	    const childrenLength = children.length;
	    if (childrenLength) {
	        if (childrenLength === 1) {
	            props.children = children[0];
	        }
	        else {
	            props.children = children;
	        }
	    }
	    return ReactElement(type, key, ref, props);
	};

	// react包 将jsx作为createElement导出
	var index = {
	    version: '1.0.0',
	    createElement: jsx
	};

	return index;

}));

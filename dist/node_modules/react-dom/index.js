(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ReactDOM = {}));
})(this, (function (exports) { 'use strict';

	const NoFlags = 0b0000000;
	const Placement = 0b0000010;
	const Update = 0b0000100;
	const ChildDeletion = 0b0001000;
	const MutationMask = Placement | Update | ChildDeletion;

	const FunctionComponent = 0;
	const HostRoot = 3;
	const HostComponent = 5;
	const HostText = 6;

	class FiberNode {
	    tag;
	    key;
	    stateNode; //fiber对应的dom实例
	    type; //可以是原生Dom元素,函数组件,类组件
	    return;
	    sibling;
	    child;
	    index;
	    ref;
	    pendingProps; //要更新的属性
	    memoizedProps; //更新完的属性
	    memoizedState; //更新完成后的新的state
	    alternate; //指向备用结点 一般是老结点
	    flags; //节点副作用类型
	    subtreeFlags; //子节点的副作用类型
	    updateQueue; //更新计划队列
	    constructor(tag, pendingProps, key) {
	        // 基本类型
	        this.tag = tag;
	        this.key = key;
	        this.ref = null;
	        this.stateNode = null;
	        this.type = null;
	        // fiber树结构
	        this.return = null;
	        this.sibling = null;
	        this.child = null;
	        this.index = 0;
	        // 工作单元
	        this.pendingProps = pendingProps;
	        this.memoizedProps = null;
	        this.memoizedState = null;
	        this.alternate = null;
	        this.flags = NoFlags;
	        this.subtreeFlags = NoFlags;
	        this.updateQueue = null;
	    }
	}
	// 通过container连接容器,通过current连接fiber树根节点
	class FiberRootNode {
	    container;
	    current;
	    finishedWork;
	    constructor(container, hostRootFiber) {
	        this.container = container;
	        this.current = hostRootFiber;
	        hostRootFiber.stateNode = this;
	        this.finishedWork = null;
	    }
	}
	const createWorkInProgress = (current, pendingProps) => {
	    // fiber 结点的旧结点
	    let workInProgress = current.alternate;
	    if (workInProgress === null) {
	        // 首屏渲染 (mount)
	        workInProgress = new FiberNode(current.tag, pendingProps, current.key);
	        workInProgress.stateNode = current.stateNode;
	        // 添加双缓冲机制(就是设置备用节点)
	        workInProgress.alternate = current;
	        current.alternate = workInProgress;
	    }
	    else {
	        // 非首屏渲染(update)
	        workInProgress.pendingProps = pendingProps;
	        // effect副作用链表置空,在更新过程中记录新的副作用
	        workInProgress.flags = NoFlags;
	        workInProgress.subtreeFlags = NoFlags;
	    }
	    workInProgress.type = current.type;
	    workInProgress.updateQueue = current.updateQueue;
	    workInProgress.child = current.child;
	    workInProgress.memoizedProps = current.memoizedProps;
	    workInProgress.memoizedState = current.memoizedState;
	    return workInProgress;
	};
	// 根据dom节点创建新的fiber节点
	function createFiberFromElement(element) {
	    const { type, key, props } = element;
	    let fiberTag = FunctionComponent;
	    // 判断是函数组件还是原生dom
	    if (typeof type == 'string') {
	        fiberTag = HostComponent;
	    }
	    else if (typeof type !== 'function' && true) {
	        console.warn('未实现的类型', type);
	    }
	    const fiber = new FiberNode(fiberTag, props, key);
	    fiber.type = type;
	    return fiber;
	}

	// 创建更新结点
	const createUpdate = (action) => {
	    return {
	        action
	    };
	};
	// 创建更新队列
	const createUpdateQueue = () => {
	    return {
	        shared: {
	            pending: null
	        }
	    };
	};
	// 添加update
	const enqueueUpdate = (UpdateQueue, update) => {
	    UpdateQueue.shared.pending = update;
	};
	// 消费update
	const processUpdateQueue = (baseState, pendingUpdate) => {
	    const result = {
	        memoizedState: baseState
	    };
	    if (pendingUpdate !== null) {
	        const action = pendingUpdate.action;
	        if (action instanceof Function) {
	            result.memoizedState = action(baseState);
	        }
	        else {
	            result.memoizedState = action;
	        }
	    }
	    return result;
	};

	// 检查是否有 运行环境是否有 Symbol
	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	// 这个是ReactElement的$$typeof 用于防范XSS注入攻击（会将对象渲染成元素）
	// json字符串不能为Symbol 用于防范XSS （传入的json字符串无法传入$$typeof）也就无法生成ReactElement元素
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	function ChildReconciler(shouldTrackSideEffects) {
	    // 处理单节点（element创建fiber节点将returnFiber传入.return）
	    function reconcileSingleElement(returnFiber, currentFiber, element) {
	        const fiber = createFiberFromElement(element);
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    // 处理文本节点
	    function reconcileSingleTextNode(returnFiber, currentFiber, content) {
	        const fiber = new FiberNode(HostText, { content }, null);
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    // fiber节点添加更新flag
	    function placeSingleChild(fiber) {
	        //首屏渲染且追踪副作用时才添加更新flags
	        if (shouldTrackSideEffects && fiber.alternate == null) {
	            fiber.flags |= Placement;
	        }
	        return fiber;
	    }
	    // 根据不同阶段，返回不同实现
	    /**
	     * 根据newChild创建new fiber new fiber的return指向returnfiber
	     * return new fiber
	     */
	    return function reconcileChildrenFibers(returnFiber, currentFiber, newChild) {
	        if (typeof newChild == 'object' && newChild !== null) {
	            switch (newChild.$$typeof) {
	                case REACT_ELEMENT_TYPE:
	                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFiber, newChild));
	                default:
	                    {
	                        console.warn('未实现的类型', newChild);
	                    }
	                    break;
	            }
	        }
	        if (Array.isArray(newChild)) {
	            //TODO : 暂不处理
	            {
	                console.warn('未实现的reconcile类型', newChild);
	            }
	        }
	        if (typeof newChild === 'string' || typeof newChild === 'number') {
	            //创建fiber文本节点
	            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFiber, newChild));
	        }
	        {
	            console.warn('未实现的reconcile类型', newChild);
	        }
	        return null;
	    };
	}
	// 更新阶段 追踪副作用
	const reconcileChildFibers = ChildReconciler(true);
	// 首屏渲染阶段，不追踪副作用，只对根节点进行一次dom插入操作
	const mountChildFibers = ChildReconciler(false);

	const beginWork = (workInProgress) => {
	    switch (workInProgress.tag) {
	        case HostRoot:
	            return updateHostRoot(workInProgress);
	        case HostComponent:
	            return updateHostComponent(workInProgress);
	        case HostText:
	            return updateHostText();
	        default:
	            {
	                console.warn('beginWork未实现的情况', workInProgress.tag);
	            }
	            break;
	        // 少了个函数组件
	    }
	};
	function updateHostRoot(workInProgress) {
	    const baseState = workInProgress.memoizedState;
	    const updateQueue = workInProgress.updateQueue;
	    const pending = updateQueue.shared.pending;
	    // 清理更新链表(目前还不知道怎么成为链表,没有连接) pending目前就是个update节点 要么是一个传入对象要么是一个函数
	    updateQueue.shared.pending = null;
	    // 计算更新的最新值 调用更新队列中action回调，返回更新后的state
	    // 在根节点中，memoized存储了子fiber节点
	    const { memoizedState } = processUpdateQueue(baseState, pending);
	    workInProgress.memoizedState = memoizedState;
	    // 处理子节点（更新节点）的更新逻辑
	    const nextChildren = workInProgress.memoizedState;
	    reconcileChildren(workInProgress, nextChildren);
	    return workInProgress.child;
	}
	function updateHostComponent(workInProgress) {
	    const nextProps = workInProgress.pendingProps;
	    const nextChildren = nextProps.children;
	    reconcileChildren(workInProgress, nextChildren);
	    return workInProgress.child;
	}
	// 处理文字节点直接返回null???
	function updateHostText() {
	    return null;
	}
	function reconcileChildren(workInProgress, children) {
	    const current = workInProgress.alternate;
	    if (current !== null) {
	        // 更新阶段
	        workInProgress.child = reconcileChildFibers(workInProgress, current.child, children);
	    }
	    else {
	        workInProgress.child = mountChildFibers(workInProgress, null, children);
	    }
	}

	/**
	 *
	 * 创建dom实例
	 */
	const createInstance = (type, porps) => {
	    // TODO: 处理 props
	    const element = document.createElement(type);
	    return element;
	};
	/**
	 * 为dom实例添加子节点
	 */
	const appendInitialChild = (parent, child) => {
	    parent.appendChild(child);
	};
	const createTextInstance = (content) => {
	    const element = document.createTextNode(content);
	    return element;
	};
	const appendChildToContainer = (child, parent) => {
	    parent.appendChild(child);
	};

	let nextEffect = null;
	const commitMutationEffect = (finishedWork) => {
	    nextEffect = finishedWork;
	    while (nextEffect !== null) {
	        const child = nextEffect.child;
	        if ((nextEffect.subtreeFlags & MutationMask) !== NoFlags &&
	            child !== null) {
	            nextEffect = child;
	        }
	        else {
	            up: while (nextEffect !== null) {
	                commitMutationEffectsOnFiber(nextEffect);
	                const sibling = nextEffect.sibling;
	                if (sibling !== null) {
	                    nextEffect = sibling;
	                    break up;
	                }
	                nextEffect = nextEffect.return;
	            }
	        }
	    }
	};
	const commitMutationEffectsOnFiber = (finishedWork) => {
	    const flags = finishedWork.flags;
	    if ((flags & Placement) !== NoFlags) {
	        commitPlacement(finishedWork);
	        finishedWork.flags &= -3;
	    }
	    if ((flags & Update) !== NoFlags) {
	        // TODO Update
	        finishedWork.flags &= -5;
	    }
	    if ((flags & ChildDeletion) !== NoFlags) {
	        // TODO ChildDeletion
	        finishedWork.flags &= -9;
	    }
	};
	// 执行 DOM 插入操作，将 FiberNode 对应的 DOM 插入 parent DOM 中
	const commitPlacement = (finishedWork) => {
	    {
	        console.log('执行 Placement 操作', finishedWork);
	    }
	    const hostParent = getHostParent(finishedWork);
	    if (hostParent !== null) {
	        appendPlacementNodeIntoContainer(finishedWork, hostParent);
	    }
	};
	// 获取 parent DOM
	const getHostParent = (fiber) => {
	    let parent = fiber.return;
	    while (parent !== null) {
	        const parentTag = parent.tag;
	        // 处理 Root 节点
	        if (parentTag === HostRoot) {
	            return parent.stateNode.container;
	        }
	        // 处理原生 DOM 元素节点
	        if (parentTag === HostComponent) {
	            return parent.stateNode;
	        }
	        else {
	            parent = parent.return;
	        }
	    }
	    {
	        console.warn('未找到 host parent', fiber);
	    }
	    return null;
	};
	const appendPlacementNodeIntoContainer = (finishedWork, hostParent) => {
	    if (finishedWork.tag === HostComponent || finishedWork.tag === HostText) {
	        appendChildToContainer(finishedWork.stateNode, hostParent);
	    }
	    else {
	        const child = finishedWork.child;
	        if (child !== null) {
	            appendPlacementNodeIntoContainer(child, hostParent);
	            let sibling = child.sibling;
	            while (sibling !== null) {
	                appendPlacementNodeIntoContainer(sibling, hostParent);
	                sibling = sibling.sibling;
	            }
	        }
	    }
	};

	// packages/react-reconciler/src/completeWork.ts
	// 生成更新计划，计算和收集更新 flags
	const completeWork = (workInProgress) => {
	    const newProps = workInProgress.pendingProps;
	    const current = workInProgress.alternate;
	    switch (workInProgress.tag) {
	        case HostRoot:
	            bubbleProperties(workInProgress);
	            return null;
	        case HostComponent:
	            if (current !== null && workInProgress.stateNode !== null) ;
	            else {
	                // 首屏渲染阶段
	                // 构建 DOM
	                const instance = createInstance(workInProgress.type);
	                // 将 DOM 插入到 DOM 树中
	                appendAllChildren(instance, workInProgress);
	                workInProgress.stateNode = instance;
	            }
	            // 收集更新 flags
	            bubbleProperties(workInProgress);
	            return null;
	        case HostText:
	            if (current !== null && workInProgress.stateNode !== null) ;
	            else {
	                // 首屏渲染阶段
	                // 构建 DOM
	                const instance = createTextInstance(newProps.content);
	                workInProgress.stateNode = instance;
	            }
	            // 收集更新 flags
	            bubbleProperties(workInProgress);
	            return null;
	        default:
	            {
	                console.warn('completeWork 未实现的类型', workInProgress);
	            }
	            return null;
	    }
	};
	/**
	 * 深度遍历workinprogress的子节点，生成对应的dom实例加入到parent容器中
	 */
	function appendAllChildren(parent, workInProgress) {
	    let node = workInProgress.child;
	    while (node !== null) {
	        if (node.tag == HostComponent || node.tag == HostText) {
	            appendInitialChild(parent, node.stateNode);
	        }
	        else if (node.child !== null) {
	            // 递归处理其他类型的组件节点的子节点
	            node.child.return = node;
	            node = node.child;
	            continue;
	        }
	        if (node == workInProgress) {
	            return;
	        }
	        while (node.sibling === null) {
	            if (node.return === null || node.return === workInProgress) {
	                return;
	            }
	            node = node.return;
	        }
	        // 处理下一个兄弟节点
	        node.sibling.return = node.return;
	        node = node.sibling;
	    }
	}
	// 收集更新 flags，将子 FiberNode 的 flags 冒泡到父 FiberNode 上
	function bubbleProperties(workInProgress) {
	    let subtreeFlags = NoFlags;
	    let child = workInProgress.child;
	    while (child !== null) {
	        subtreeFlags |= child.subtreeFlags;
	        subtreeFlags |= child.flags;
	        child.return = workInProgress;
	        child = child.sibling;
	    }
	    workInProgress.subtreeFlags |= subtreeFlags;
	}

	let workInProgress = null;
	function renderRoot(root) {
	    // 将根节点推入循环队列
	    prepareFreshStack(root);
	    try {
	        // 开始循环任务
	        workLoop();
	    }
	    catch (e) {
	        console.warn('worlLoop error', e);
	        workInProgress = null;
	    }
	    const finishedWork = root.current.alternate;
	    root.finishedWork = finishedWork;
	    // 提交阶段的入口函数
	    commitRoot(root);
	}
	function commitRoot(root) {
	    const finishedWork = root.finishedWork;
	    if (finishedWork == null) {
	        return;
	    }
	    {
	        console.log('commit 阶段开始');
	    }
	    root.finishedWork = null;
	    const subtreeHasEffects = (finishedWork.subtreeFlags & MutationMask) !== NoFlags;
	    const rootHasEffects = (finishedWork.flags & MutationMask) !== NoFlags;
	    if (subtreeHasEffects || rootHasEffects) {
	        //TODO beforeutation
	        commitMutationEffect(finishedWork);
	        root.current = finishedWork;
	        // TODO LAYOUT
	    }
	    else {
	        root.current = finishedWork;
	    }
	}
	function prepareFreshStack(root) {
	    workInProgress = createWorkInProgress(root.current, {});
	}
	// 从根节点向下遍历,到叶子结点开始遍历兄弟结点,兄弟节点遍历完开始遍历父节点的兄弟结点,最终回溯到根节点的return(null])
	function workLoop() {
	    while (workInProgress !== null) {
	        //深度优先遍历,向下递归子节点
	        performUnitOfWork(workInProgress);
	    }
	}
	function performUnitOfWork(fiber) {
	    // 比较并返回fiber的子节点(创建fiber的子节点，为子节点打上update标签，返回子节点)
	    const next = beginWork(fiber);
	    fiber.memoizedProps = fiber.pendingProps;
	    if (next == null) {
	        // 此时已经到叶子结点
	        // 遍历兄弟节点
	        completeUnitOfWork(fiber);
	    }
	    else {
	        workInProgress = next;
	    }
	}
	function completeUnitOfWork(fiber) {
	    let node = fiber;
	    // 深度优先遍历兄弟节点或父节点
	    do {
	        completeWork(node);
	        const sibling = node.sibling;
	        if (sibling !== null) {
	            workInProgress = sibling;
	            return;
	        }
	        node = node?.return;
	        workInProgress = node;
	    } while (node !== null);
	}
	// 调度功能
	function scheduleUpdateOnFiber(fiber) {
	    // 从触发更新的结点一路遍历到根节点 fiberrootnode节点
	    const root = markUpdateFromFiberToRoot(fiber);
	    //root可能为空
	    renderRoot(root);
	}
	function markUpdateFromFiberToRoot(fiber) {
	    let node = fiber;
	    // 从触发更新的结点一路遍历到根节点
	    while (node.return !== null) {
	        node = node.return;
	    }
	    if (node.tag === HostRoot) {
	        // 返回根节点与容器的中继结点
	        return node.stateNode;
	    }
	    return null;
	}

	//传入容器,返回current指向fiber树根节点 container指向容器的fiberRootnode
	function createContainer(container) {
	    // 初始化fiber树根节点
	    const hostRootFiber = new FiberNode(HostRoot, {}, null);
	    // 连接通过根节点和容器
	    const root = new FiberRootNode(container, hostRootFiber);
	    //?? 为啥不能直接在初始化时 创建呢
	    hostRootFiber.updateQueue = createUpdateQueue();
	    return root;
	}
	/**
	 *
	 * 使用传入的element(一般为<App/>)创建新的更新节点,加入fiber根节点的更新队列中，然后调度改节点的更新结点
	 */
	function updateContainer(element, root) {
	    const hostRootFiber = root.current;
	    const update = createUpdate(element);
	    enqueueUpdate(hostRootFiber.updateQueue, update);
	    // 调度该根节点上的更新结点
	    scheduleUpdateOnFiber(hostRootFiber);
	    return element;
	}

	function createRoot$1(container) {
	    // 创建root节点,container指向容器，current指向fiber树根节点
	    const root = createContainer(container);
	    return {
	        render(element) {
	            updateContainer(element, root);
	        }
	    };
	}

	var ReactDOM = /*#__PURE__*/Object.freeze({
		__proto__: null,
		createRoot: createRoot$1
	});

	const createRoot = createRoot$1;

	exports.createRoot = createRoot;
	exports.default = ReactDOM;

	Object.defineProperty(exports, '__esModule', { value: true });

}));
